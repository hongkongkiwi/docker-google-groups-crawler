#!/usr/bin/env bash

# global parameters
set -o pipefail # prevents errors in a pipeline from being masked

AMQP_PUBLISH_LOG=${AMQP_PUBLISH_LOG:-"/var/log/amqp-publish.log"}

# Import the BLOG library
[ -f "$BLOG" ] && source "$BLOG" || { echo "I require b-log.sh but it's not found.  Aborting."; exit 1; }
# Here we are matching the BLOG format to match the format of rclone
B_LOG_DEFAULT_TEMPLATE="@19:1@ @6:2@ : @5@"
LOG_LEVELS=(
    ${LOG_LEVEL_FATAL}  "FATAL"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[41;37m" "\e[0m"
    ${LOG_LEVEL_ERROR}  "ERROR"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;31m" "\e[0m"
    ${LOG_LEVEL_WARN}   "WARN"   "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;33m" "\e[0m"
    ${LOG_LEVEL_NOTICE} "NOTICE" "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;32m" "\e[0m"
    ${LOG_LEVEL_INFO}   "INFO"   "${B_LOG_DEFAULT_TEMPLATE}" "\e[37m" "\e[0m"
    ${LOG_LEVEL_DEBUG}  "DEBUG"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;34m" "\e[0m"
    ${LOG_LEVEL_TRACE}  "TRACE"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[94m" "\e[0m"
)

# Setup some B-Log variables
B_LOG --file "$AMQP_PUBLISH_LOG" --stdout true --date-format '%Y/%m/%d %H:%M:%S'
LOG_LEVEL_ALL

# Check if the commands are installed
command -v "amqp-publish" >/dev/null 2>&1 || { FATAL "I require amqp-publish but it's not installed.  Aborting."; exit 1; }

[ "$AMQP_ENABLED" == "true" ] || { ERROR "AMQP_ENABLED is not equal to true.  Aborting."; exit 1; }

FILENAME="$1"
METADATA="$2"
[ "$FILENAME" != "" ] || { FATAL "Must pass a filename.  Aborting."; exit 1; }
[ -f "$FILENAME" ] || { FATAL "Filename does not exist '$FILENAME'.  Aborting."; exit 1; }

KV_STRING=""
if [[ "$METADATA" != "" ]]; then
  for KEY_VALUE in ${METADATA//,/ }; do
    KEY=`echo "$KEY_VALUE" | cut -f1 -d'='`
    VALUE=`echo "$KEY_VALUE" | cut -f2 -d'='`
    KV="\"${KEY}\":\"${VALUE}\""
    KV_STRING="${KV_STRING},${KV}"
  done
fi

BODY_MSG="{\"filename\":\"${FILENAME}\"${KV_STRING}}"

# This is a complicated one liner to extract the host and port from a URL
AMQP_EXTRACT=`echo "$AMQP_URL" | python -c "import re; s = '${AMQP_URL}'; m = re.search(r'^((?P<scheme>[^:/?#]+):(?=//))?(//)?(((?P<login>[^:]+)(?::(?P<password>[^@]+)?)?@)?(?P<host>[^@/?#:]*)(?::(?P<port>\d+)?)?)?(?P<path>[^?#]*)(\?(?P<query>[^#]*))?(#(?P<fragment>.*))?', s); host = m.group('host') if m.group('host') else ''; port = m.group('port') if m.group('port') else ''; print(host + ':' + port)"`
AMQP_HOST=`echo "$AMQP_EXTRACT" | cut -f1 -d':'`
AMQP_PORT=`echo "$AMQP_EXTRACT" | cut -f2 -d':'`
AMQP_PORT=${AMQP_PORT:-5672}
AMQP_HOST_PORT_TIMEOUT_SECS=2

# Check if the
nc -w $AMQP_HOST_PORT_TIMEOUT_SECS "$AMQP_HOST" $AMQP_PORT 2>/dev/null || { FATAL "Looks like AMQP host '$AMQP_HOST:$AMQP_PORT' is not responding.  Aborting."; exit 1; }

# echo "amqp-publish \
#   --url=\"$AMQP_URL\" \
#   --exchange=\"$AMQP_EXCHANGE\" \
#   --routing-key=\"$AMQP_QUEUE\" \
#   --content-type=\"application/json\" \
#   --content-encoding=\"utf-8\" \
#   --heartbeat 1 \
#   --body=\"${BODY_MSG}\""

amqp-publish \
  --url="$AMQP_URL" \
  --exchange="$AMQP_EXCHANGE" \
  --routing-key="$AMQP_QUEUE" \
  --content-type="application/json" \
  --content-encoding="utf-8" \
  --body="${BODY_MSG}" && \
NOTICE "Successfully sent AMQP message. Exchange='${AMQP_EXCHANGE}', Routing Key='${AMQP_QUEUE}', Body='${BODY_MSG}'" || \
ERROR "Failed to send AMQP message!"
