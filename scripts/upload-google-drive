#!/usr/bin/env bash

# global parameters
set -o pipefail # prevents errors in a pipeline from being masked
GOOGLE_DRIVE_UPLOAD_LOG_FILE=${GOOGLE_DRIVE_UPLOAD_LOG_FILE:-"/var/log/google-drive-upload.log"}

# Import the BLOG library
[ -f "$BLOG" ] && source "$BLOG" || { echo "I require b-log.sh but it's not found.  Aborting."; exit 1; }
# Here we are matching the BLOG format to match the format of rclone
B_LOG_DEFAULT_TEMPLATE="@19:1@ @6:2@ : @5@"
LOG_LEVELS=(
    ${LOG_LEVEL_FATAL}  "FATAL"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[41;37m" "\e[0m"
    ${LOG_LEVEL_ERROR}  "ERROR"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;31m" "\e[0m"
    ${LOG_LEVEL_WARN}   "WARN"   "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;33m" "\e[0m"
    ${LOG_LEVEL_NOTICE} "NOTICE" "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;32m" "\e[0m"
    ${LOG_LEVEL_INFO}   "INFO"   "${B_LOG_DEFAULT_TEMPLATE}" "\e[37m" "\e[0m"
    ${LOG_LEVEL_DEBUG}  "DEBUG"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;34m" "\e[0m"
    ${LOG_LEVEL_TRACE}  "TRACE"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[94m" "\e[0m"
)

# Setup some B-Log variables
B_LOG --file "$GOOGLE_DRIVE_UPLOAD_LOG_FILE" --stdout true --date-format '%Y/%m/%d %H:%M:%S'
LOG_LEVEL_ALL

# Check if the commands are installed
command -v rclone >/dev/null 2>&1 || { FATAL "I require rclone but it's not installed.  Aborting."; exit 1; }
command -v crudini >/dev/null 2>&1 || { FATAL "I require crudini but it's not installed.  Aborting."; exit 1; }

[ "$RCLONE_UPLOAD" == "true" ] || { FATAL "RCLONE_UPLOAD is not equal to true.  Aborting."; exit 1; }

# Check if the rclone config file is available and valid
RCLONE_LOCAL=${RCLONE_LOCAL:="local"}
RCLONE_CONFIG_FILE=${RCLONE_CONFIG_FILE:="/config/rclone.conf"}
[ -f "$RCLONE_CONFIG_FILE" ] || { FATAL "I require "$RCLONE_CONFIG_FILE" but it cannot be found.  Aborting."; exit 1; }
[ -z ${RCLONE_REMOTE+x} ] && { FATAL "I require environment variable RCLONE_REMOTE but it is not set.  Aborting."; exit 1; }
# If the RCLONE_REMOTE does not contain : then add it
RCLONE_REMOTE_HOST=`echo "$RCLONE_REMOTE" | cut -f1 -d':'`
[ -z "${RCLONE_REMOTE##*:*}" ] && \
  RCLONE_REMOTE_PATH=`echo "$RCLONE_REMOTE" | cut -f2 -d':'` || \
  RCLONE_REMOTE_PATH=""

crudini --get --existing=section "$RCLONE_CONFIG_FILE" | grep -q "$RCLONE_REMOTE_HOST" || { FATAL "Looks like rclone.conf does not contain the required [${RCLONE_REMOTE}] section.  Aborting."; exit 1; }
crudini --get --existing=section "$RCLONE_CONFIG_FILE" | grep -q "$RCLONE_LOCAL" || { FATAL "Looks like rclone.conf does not contain the required [${RCLONE_LOCAL}] section.  Aborting."; exit 1; }

# Check if we have the required variables
FILENAME="$1"
[ "$FILENAME" != "" ] || { FATAL "Empty filename passed.  Aborting."; exit 1; }
[ -f "$FILENAME" ] || { FATAL "File "${FILENAME}" does not exist.  Aborting."; exit 1; }
BASE_FILENAME=`basename "$FILENAME"`
UPLOADED_FILENAME="$2"
# If we have passed an UPLOADED_FILENAME then use that, otherwise get it from the file
[ "$UPLOADED_FILENAME" == "" ] && UPLOADED_FILENAME="${BASE_FILENAME}"
REMOTE="${RCLONE_REMOTE_HOST}:${RCLONE_REMOTE_PATH}/${UPLOADED_FILENAME}"

# I'm just using this for debugging
# echo "rclone \
# 	--config \"${RCLONE_CONFIG_FILE}\" \
# 	copyto \
#   \"${RCLONE_LOCAL}:${FILENAME}\" \
# 	\"$REMOTE\""

# Check if we need to take any action
# if we get FAIL then the file is different or missing
FILE_CHECK=`rclone \
  -q \
	--config "${RCLONE_CONFIG_FILE}" \
  check \
  "${RCLONE_LOCAL}:${FILENAME}" \
  "${RCLONE_REMOTE_HOST}:${RCLONE_REMOTE_PATH}/" \
  2>/dev/null && \
    echo "OK" || \
    echo "FAIL"`

if [[ "$FILE_CHECK" == "FAIL" ]]; then
  rclone \
    --log-level "INFO" \
    --stats-log-level "DEBUG" \
    --log-file "${GOOGLE_DRIVE_UPLOAD_LOG_FILE}" \
  	--config "${RCLONE_CONFIG_FILE}" \
  	copyto \
  	"${RCLONE_LOCAL}:${FILENAME}" \
  	"$REMOTE"
else
    INFO "File '${RCLONE_REMOTE_PATH}/${UPLOADED_FILENAME}' Exists. Skipping Upload."
fi

exit 0
