#!/usr/bin/env bash

# global parameters
set -o pipefail # prevents errors in a pipeline from being masked

FILE_DOWNLOADED_HOOK_LOG=${FILE_DOWNLOADED_HOOK_LOG:-"/var/log/file-downloaded.log"}

# Import the BLOG library
[ -f "$BLOG" ] && source "$BLOG" || { echo "I require b-log.sh but it's not found.  Aborting."; exit 1; }
# Here we are matching the BLOG format to match the format of rclone
B_LOG_DEFAULT_TEMPLATE="@19:1@ @6:2@ : @5@"
LOG_LEVELS=(
    ${LOG_LEVEL_FATAL}  "FATAL"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[41;37m" "\e[0m"
    ${LOG_LEVEL_ERROR}  "ERROR"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;31m" "\e[0m"
    ${LOG_LEVEL_WARN}   "WARN"   "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;33m" "\e[0m"
    ${LOG_LEVEL_NOTICE} "NOTICE" "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;32m" "\e[0m"
    ${LOG_LEVEL_INFO}   "INFO"   "${B_LOG_DEFAULT_TEMPLATE}" "\e[37m" "\e[0m"
    ${LOG_LEVEL_DEBUG}  "DEBUG"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[1;34m" "\e[0m"
    ${LOG_LEVEL_TRACE}  "TRACE"  "${B_LOG_DEFAULT_TEMPLATE}" "\e[94m" "\e[0m"
)

# Setup some B-Log variables
B_LOG --file "$FILE_DOWNLOADED_HOOK_LOG" --stdout true --date-format '%Y/%m/%d %H:%M:%S'
LOG_LEVEL_ALL

FILENAME="$1"

AMQP_SCRIPT=${AMQP_SCRIPT:-"/usr/local/bin/send-amqp-message"}
KAFKA_SCRIPT=${KAFKA_SCRIPT:-"/usr/local/bin/send-kafka-message"}
GDRIVE_SCRIPT=${GDRIVE_SCRIPT:-"/usr/local/bin/upload-google-drive"}
LDB=${LDB:-"/usr/local/bin/ldb"}
LEVELDB_DB=${LEVELDB_DB:-"/data/filesdb"}

[ "$FILENAME" != "" ] || { FATAL "Must pass a filename.  Aborting."; exit 1; }
[ -f "$FILENAME" ] || { FATAL "Filename does not exist '$FILENAME'.  Aborting."; exit 1; }
BASE_FILENAME=`basename "$FILENAME"`
SHA1_FILEHASH=`sha1sum "$FILENAME" | cut -f1 -d' '`

# Make sure that our LevelDB exists
[ `"$LDB" "${LEVELDB_DB}" --create --size` ] || { FATAL "Could not create LevelDB '$LEVELDB_DB'.  Aborting."; exit 1; }
# Check if we have a filesize already for this file
SAVED_FILESIZE=`"$LDB" "${LEVELDB_DB}" get "$SHA1_FILEHASH" 2>/dev/null`
FILESIZE=`stat --printf="%s" "$FILENAME"`

# If have a filesize and it matches our current filesize then skip
[ "$FILESIZE" == "$SAVED_FILESIZE" ] && { NOTICE "File already sent '$BASE_FILENAME'.  Ignoring."; exit 0; }
NOTICE "Discovered New File: $BASE_FILENAME"

METADATA=""
if [[ "${RCLONE_UPLOAD}" == "true" ]]; then
  INFO "Uploading file with rclone script"
  "$GDRIVE_SCRIPT" "$FILENAME" "$BASE_FILENAME"
  METADATA="type=google_drive,remote_filename=/${BASE_FILENAME},filesize=${FILESIZE}"
else
  METADATA='type=file,filesize=${FILESIZE}'
fi

if [[ "${AMQP_ENABLED}" == "true" ]]; then
  INFO "Sending message about file to AMQP"
  "${AMQP_SCRIPT}" "${FILENAME}" "${METADATA}"
fi

if [[ "${KAFKA_ENABLED}" == "true" ]]; then
  INFO "Sending message about file to Kafka"
  "${KAFKA_SCRIPT}" "${FILENAME}" "${METADATA}"
fi

"$LDB" "${LEVELDB_DB}" put "$SHA1_FILEHASH" "$FILESIZE"
